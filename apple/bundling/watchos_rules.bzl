# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Rule implementations for creating watchOS applications and bundles.

DO NOT load this file directly; use the macro in
//apple:watchos.bzl instead. Bazel rules receive their name at
*definition* time based on the name of the global to which they are assigned.
We want the user to call macros that have the same name, to get automatic
binary creation, entitlements support, and other features--which requires a
wrapping macro because rules cannot invoke other rules.
"""

load("//apple/bundling:bundler.bzl", "bundler")
load("//apple/bundling:bundling_support.bzl",
     "bundling_support")
load("//apple/bundling:product_support.bzl",
     "product_support")
load("//apple/bundling:rule_attributes.bzl",
     "common_rule_attributes",
     "common_rule_without_binary_attributes")
load("//apple/bundling:run_actions.bzl", "run_actions")
load("//apple:providers.bzl", "AppleResourceSet")
load("//apple:utils.bzl", "merge_dictionaries")


def _watchos_application_impl(ctx):
  """Implementation of the watchos_application Skylark rule."""

  # Collect asset catalogs and storyboards, if any are present.
  additional_resource_sets = []
  additional_resources = depset(ctx.files.app_icons + ctx.files.storyboards)
  if additional_resources:
    additional_resource_sets.append(AppleResourceSet(
        resources=additional_resources,
    ))

  embedded_bundles = []

  ext = ctx.attr.extension
  if ext:
    embedded_bundles.append(bundling_support.embedded_bundle(
        "PlugIns", ext.apple_bundle, verify_bundle_id=True))

  providers, additional_outputs = bundler.run(
      ctx,
      "WatchosApplicationArchive", "watchOS application",
      ctx.attr.bundle_id,
      additional_resource_sets=additional_resource_sets,
      embedded_bundles=embedded_bundles,
  )

  # The empty watchos_application provider acts as a tag to let depending
  # attributes restrict the targets that can be used to just watchOS
  # applications.
  #
  # TODO(b/36513412): Support 'bazel run'.
  return struct(
      files=depset([ctx.outputs.archive]) + additional_outputs,
      watchos_application=struct(),
      **providers
  )


watchos_application = rule(
    _watchos_application_impl,
    attrs = merge_dictionaries(common_rule_without_binary_attributes(), {
        "app_icons": attr.label_list(allow_files=True),
        "entitlements": attr.label(
            allow_files=[".entitlements"],
            single_file=True,
        ),
        "extension": attr.label(
            providers=[["apple_bundle", "watchos_extension"]],
            mandatory=True,
        ),
        "storyboards": attr.label_list(
            allow_files=[".storyboard"],
        ),
        "_allowed_families": attr.string_list(default=["watch"]),
        # The extension of the bundle being generated by the rule.
        "_bundle_extension": attr.string(default=".app"),
        # iOS .app bundles should include a PkgInfo file.
        "_needs_pkginfo": attr.bool(default=True),
        # A format string used to compose the path to the bundle inside the
        # packaged archive. The placeholder "%s" is replaced with the name of the
        # bundle (with its extension).
        "_path_in_archive_format": attr.string(default="%s"),
        # The platform type that should be passed to tools for targets of this
        # type.
        "_platform_type": attr.string(
            default=str(apple_common.platform_type.watchos)
        ),
        # The product type that should be passed to tools for targets of this
        # type.
        "_product_type": attr.string(
            default=str(product_support.WATCHAPP2_PRODUCT_TYPE),
        ),
    }),
    fragments = ["apple", "objc"],
    outputs = {
        "archive": "%{name}.zip",
    },
)


def _watchos_extension_impl(ctx):
  """Implementation of the watchos_extension Skylark rule."""

  # Collect asset catalogs and storyboards, if any are present.
  additional_resource_sets = []
  additional_resources = depset(ctx.files.app_icons)
  if additional_resources:
    additional_resource_sets.append(AppleResourceSet(
        resources=additional_resources,
    ))

  providers, additional_outputs = bundler.run(
      ctx,
      "WatchosExtensionArchive", "watchOS extension",
      ctx.attr.bundle_id,
      additional_resource_sets=additional_resource_sets,
  )

  # The empty watchos_extension provider acts as a tag to let depending
  # attributes restrict the targets that can be used to just watchOS
  # extensions.
  return struct(
      files=depset([ctx.outputs.archive]) + additional_outputs,
      watchos_extension=struct(),
      **providers
  )


watchos_extension = rule(
    _watchos_extension_impl,
    attrs = merge_dictionaries(common_rule_attributes(), {
        "app_icons": attr.label_list(allow_files=True),
        "entitlements": attr.label(
            allow_files=[".entitlements"],
            single_file=True,
        ),
        "_allowed_families": attr.string_list(default=["watch"]),
        # The extension of the bundle being generated by the rule.
        "_bundle_extension": attr.string(default=".appex"),
        # iOS extension bundles should not include a PkgInfo file.
        "_needs_pkginfo": attr.bool(default=False),
        # A format string used to compose the path to the bundle inside the
        # packaged archive. The placeholder "%s" is replaced with the name of the
        # bundle (with its extension).
        "_path_in_archive_format": attr.string(default="%s"),
        # The platform type that should be passed to tools for targets of this
        # type.
        "_platform_type": attr.string(
            default=str(apple_common.platform_type.watchos)
        ),
        # The product type that should be passed to tools for targets of this
        # type.
        "_product_type": attr.string(
            default=str(product_support.WATCHKIT2_EXTENSION_PRODUCT_TYPE),
        ),
        "_propagates_frameworks": attr.bool(default=True),
    }),
    fragments = ["apple", "objc"],
    outputs = {
        "archive": "%{name}.zip",
    },
)
