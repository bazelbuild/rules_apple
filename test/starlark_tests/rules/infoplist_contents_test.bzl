# Copyright 2019 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Starlark test rules for debug symbols.

This test takes a target that propagates an AppleBundleInfo provider and a dictionary of keys and
values expected to be present in the Info.plist file generated by the rules.

This rule is meant to be used only for rules_apple tests and are considered implementation details
that may change at any time. Please do not depend on this rule.
"""

load(
    "@build_bazel_apple_support//lib:apple_support.bzl",
    "apple_support",
)
load(
    "@build_bazel_rules_apple//apple:providers.bzl",
    "AppleBundleInfo",
)
load(
    "@bazel_skylib//lib:dicts.bzl",
    "dicts",
)

def _infoplist_contents_test_impl(ctx):
    """Implementation of the plist_contents_test rule."""
    plist_file = ctx.attr.target_under_test[AppleBundleInfo].infoplist
    plist_path = plist_file.short_path

    test_lines = [
        "#!/bin/bash",
        "EXIT_CODE=0",
    ]

    for (key, value) in ctx.attr.expected_values.items():
        test_lines.extend([
            "VALUE=\"$(/usr/libexec/PlistBuddy -c \"Print {0}\" {1} 2>/dev/null)\"".format(
                key,
                plist_path,
            ),
            "if [[ -z \"$VALUE\" ]]; then",
            "  echo \"ERROR: Expected '{}' to be contained in the plist.\"".format(key),
            "  EXIT_CODE=1",
            "elif [[ \"$VALUE\" != {} ]]; then".format(value),
            "  echo \"ERROR: Expected '\"$VALUE\"' to match '{0}'\" for key '{1}'".format(
                value,
                key,
            ),
            "  EXIT_CODE=1",
            "fi",
        ])

    test_lines.append("exit $EXIT_CODE")

    test_script = ctx.actions.declare_file("{}_test_script".format(ctx.label.name))
    ctx.actions.write(test_script, "\n".join(test_lines), is_executable = True)

    return [
        testing.ExecutionInfo(apple_support.action_required_execution_requirements(ctx)),
        testing.TestEnvironment(apple_support.action_required_env(ctx)),
        DefaultInfo(
            executable = test_script,
            runfiles = ctx.runfiles(
                files = [plist_file],
            ),
        ),
    ]

# TODO(b/131753996): Migrate this to analysistest.make instead. This is an ugly hack to be able to
# use analysistest style tests, but still waiting for
# https://github.com/bazelbuild/bazel-skylib/pull/140 to be merged and released.
infoplist_contents_test = rule(
    _infoplist_contents_test_impl,
    attrs = dicts.add(apple_support.action_required_attrs(), {
        "target_under_test": attr.label(
            mandatory = True,
            providers = [AppleBundleInfo],
            doc = "Target containing an Info.plist file to verify.",
        ),
        "expected_values": attr.string_dict(
            mandatory = True,
            doc = """
Dictionary of plist keys and expected values for that key. This test will fail if the key does not
exist or if it it doesn't match the value. * can be used as a wildcard, similar to how it works in
shell scripts.
""",
        ),
    }),
    fragments = ["apple"],
    test = True,
)
