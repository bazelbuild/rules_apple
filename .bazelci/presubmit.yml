---
x_defaults:
  # YAML has a feature for "repeated nodes", BazelCI is fine with extra nodes
  # it doesn't know about; so that is used to avoid repeating common subparts.
  common: &common
    platform: macos
    build_targets:
    - "tools/..."
    - "test/..."
    test_targets:
    - "tools/..."
    - "test/..."
    - "examples/..."

  # Tests that need extra flags
  # 1. Test that .symbols files are generated and bundled in .ipa file
  package_symbols: &package_symbols
    platform: macos
    test_flags:
    - "--apple_generate_dsym"
    - "--define=apple.package_symbols=true"
    test_targets:
    - "test/starlark_tests:ios_application_package_symbols_test"

# NOTE: To avoid listing the same things for build_flags/test_flags for each
# of these tasks, they are listed in the .bazelrc instead.
tasks:
  macos_latest:
    name: "Latest Bazel"
    bazel: latest
    <<: *common

  macos_last_green:
    name: "Last Green Bazel"
    bazel: last_green
    <<: *common

  macos_latest_head_deps:
    name: "Latest Bazel with Head Deps"
    bazel: latest
    shell_commands:
    # Update the WORKSPACE to use head versions of some deps to ensure nothing
    # has landed on them breaking this project.
    - .bazelci/update_workspace_to_deps_heads.sh
    <<: *common

  macos_latest_package_symbols:
    name: "Symbols Tests with Latest Bazel"
    bazel: latest
    <<: *package_symbols

buildifier:
  version: latest
  # rules_python cannot be included in the nested shell based bazel tests since
  # we need to repropagate all files. See //:for_bazel_tests
  warnings: -native-py
