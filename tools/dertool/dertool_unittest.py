# coding=utf-8
# Copyright 2022 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for dertool."""

import io
import os
import tempfile
import unittest

from build_bazel_rules_apple.tools.dertool import dertool


def _xml_plist(content):
  """Returns a BytesIO for a plist with the given content.

  This helper function wraps plist XML (key/value pairs) in the necessary XML
  boilerplate for a plist with a root dictionary.

  Args:
    content: The XML content of the plist, which will be inserted into a
        dictionary underneath the root |plist| element.
  Returns:
    A BytesIO object containing the full XML text of the plist.
  """
  xml = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
         "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" "
         "\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
         "<plist version=\"1.0\">\n"
         "<dict>\n" +
         content + "\n" +
         "</dict>\n"
         "</plist>\n")
  xml_bytes = xml.encode("utf8")
  return io.BytesIO(xml_bytes)


def _dertool_result(*, entitlements_plist, control):
  """Helper function that runs DerTool with the given control struct.

  This function creates a temporary file to act as the entitlements plist that
  will be converted to a DER file.

  Args:
    entitlements_plist: A BytesIO representation of an entitlements XML plist
        used as the source of truth for the DER formatted entitlements output.
    control: The control struct to pass to DerTool. See the module doc for
        the dertool module for a description of this format.
  """
  try:
    (plist_file_descriptor, plist_file_path) = tempfile.mkstemp(suffix=".plist")

    with os.fdopen(plist_file_descriptor, "wb") as plist_open_file:
      plist_bytes = entitlements_plist.read()
      plist_open_file.write(plist_bytes)

    control["entitlements_plist_path"] = plist_file_path

    tool = dertool.DerTool(control)
    tool.run()

  finally:
    # Clean up the temp entitlments.plist.
    os.unlink(plist_file_path)


class DerToolMainTest(unittest.TestCase):

  def test_xcode_simulator_plist(self):
    # Test that the processing of an entitlements plist generated by Xcode's
    # ProcessProductPackaging phase for Simulator functionality matches the DER
    # file produced by Xcode's ProcessProductPackagingDER phase.
    sim_der_file_path = "sim_der_file.der"
    _dertool_result(
        entitlements_plist=_xml_plist(
            "<key>application-identifier</key>"
            "<string>EQHXZ8M8AV.com.acompany.tryingthingsout.SomethingNew"
            "</string>"
        ),
        control={
            "output_path": sim_der_file_path,
        },
    )

    with open(sim_der_file_path, "rb") as sim_der_file:
      self.assertEqual(
          sim_der_file.read(),
          b"pU\x02\x01\x01\xb0P0N\x0c\x16application-identifier\x0c4EQHXZ8M8AV.com.acompany.tryingthingsout.SomethingNew",
      )

  def test_xcode_common_plist(self):
    # Test that the processing of an entitlements plist generated by Xcode's
    # ProcessProductPackaging phase for common functionality matches the DER
    # file produced by Xcode's ProcessProductPackagingDER phase.
    common_der_file_path = "common_der_file.der"
    _dertool_result(
        entitlements_plist=_xml_plist(
            "<key>com.apple.security.get-task-allow</key>"
            "<true/>"
        ),
        control={
            "output_path": common_der_file_path,
        },
    )

    with open(common_der_file_path, "rb") as common_der_file:
      self.assertEqual(
          common_der_file.read(),
          b"p-\x02\x01\x01\xb0(0&\x0c!com.apple.security.get-task-allow\x01\x01\xff",
      )


if __name__ == "__main__":
  unittest.main()
