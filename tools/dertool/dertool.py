# coding=utf-8
# Copyright 2022 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Der manipulation for Apple packaging rules.

This script takes a single argument that points to a file containing the JSON
representation of a "control" structure (similar to the PlMerge tool, which
takes a binary protocol buffer). This control structure is a dictionary with
the following keys:

  entitlements_plist_path: A string indicating the path to the
      entitlements.plist that will be converted to an entitlements der file.
  output_path: A string indicating the path to where the entitlements DER will
      be written.
"""

import json
import os
import subprocess
import sys
import tempfile

from build_bazel_rules_apple.tools.codesigningtool import codesigningtool


class DerToolError(ValueError):
  # pylint: disable=g-bad-exception-name
  """Raised for all errors not related to subprocess handling.

  Custom ValueError used to allow catching (and logging) just the dertool
  errors.
  """

  def __init__(self, msg):
    """Initializes an error with the given message.

    Args:
      msg: The message for the error.
    """
    ValueError.__init__(self, msg)


class DerTool(object):
  """Implements the core functionality of the der tool."""

  def __init__(self, control):
    """Initializes DerTool with the given control options.

    Args:
      control: The dictionary of options used to control the tool. Please see
          the moduledoc for a description of the format of this dictionary.
    """
    self._control = control

  def run(self):
    """Performs the operations requested by the control struct.

    Raises:
      DerToolError: For any errors specific to DerTool control file handling.
      subprocess.CalledProcessError: For any non-zero return codes reported from
          invoking the codesign tool against the given inputs.
    """
    output_path = self._control.get("output_path")
    if not output_path:
      raise DerToolError("No output file specified.")

    with open(output_path, "wb") as output_file:
      entitlements_plist_path = self._control.get("entitlements_plist_path")
      if entitlements_plist_path:
        try:
          # Write a small shell script for the purpose of codesigning
          (sh_file_descriptor, sh_file_path) = tempfile.mkstemp(suffix=".sh")
          with os.fdopen(sh_file_descriptor, "w") as sh_open_file:
            sh_open_file.write("#!/bin/sh")

          # Perform codesigning on the shell script.
          codesigningtool.invoke_codesign(
              codesign_path="/usr/bin/codesign",
              identity="-",
              entitlements=entitlements_plist_path,
              force_signing=True,
              disable_timestamp=True,
              full_path_to_sign=sh_file_path,
          )

          # Read the DER entitlements generated by the codesign command for the
          # script above, and write them to our output file.
          entitlements_der_bytes = codesigningtool.get_entitlements_der(
              codesign_path=codesigningtool.DEFAULT_CODESIGN,
              full_path_to_signed_file=sh_file_path,
          )

          if entitlements_der_bytes:
            output_file.write(entitlements_der_bytes)

        finally:
          # Clean up the temp shell script.
          os.unlink(sh_file_path)


def _main(control_path):
  """Loads JSON parameters file and runs DerTool."""
  with open(control_path) as control_file:
    control = json.load(control_file)

  tool = DerTool(control)
  try:
    tool.run()
  except (subprocess.CalledProcessError, DerToolError) as e:
    # Log tools errors cleanly for build output.
    sys.stderr.write("ERROR: %s\n" % e)
    sys.exit(1)


if __name__ == "__main__":
  if len(sys.argv) < 2:
    sys.stderr.write("ERROR: Path to control file not specified.\n")
    exit(1)

  _main(sys.argv[1])
